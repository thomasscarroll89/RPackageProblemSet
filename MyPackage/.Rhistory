library("devtools)")
library("devtools")
library("roxygen2")
install_github("devtools", "hadley")
library(MyPackage)
load_all()
load_all()
library(MyPackage)
library(MyPackage)
library(MyPackage)
library(MyPackage)
library(MyPackage)
library(MyPackage)
library(MyPackage)
library(MyPackage)
library(MyPackage)
points(x=rnorm(100), y=rnorm(100))
plot.new
plot.new()
points(x=rnorm(100), y=rnorm(100))
#' Plot DataM Object
#'
#' Modifies the "plot" function to take objects of class \code{DataM} (or any of its subclasses) and plot the dependent variable against each independent variable
#'
#' @param DataM An object of class DataM
#'
#' @author Thomas Carroll: \email{thomasscarroll89@gmail.com}
#' @rdname plot
#' @export
setMethod("plot",
signature(object="DataM"),
function(object){
plot.new()
points(x=object@covariates[,1], y=object@depvar)
}
)
setMethod("plot",
signature(object="DataM"),
function(object){
matplot(x=object@covariates[,1], y=object@depvar)
}
)
#' Plot DataM Object
#'
#' Modifies the "plot" function to take objects of class \code{DataM} (or any of its subclasses) and plot the dependent variable against each independent variable
#'
#' @param DataM An object of class DataM
#'
#' @author Thomas Carroll: \email{thomasscarroll89@gmail.com}
#' @rdname plot
#' @export
setMethod("plot",
signature(object="DataM"),
function(object){
matplot(x=object@covariates[,1], y=object@depvar)
}
)
showMethods(plot)
setMethod("plot",
signature(object="DataM"),
function(object){
matplot(x=object@covariates[,1], y=object@depvar, xaxt="n",type="l",ylab= "",xlab="", pch=1)
}
)
setMethod("plot",
signature(object="DataM"),
function(x, y, ...){
matplot(x=object@covariates[,1], y=object@depvar, xaxt="n",type="l",ylab= "",xlab="", pch=1)
}
)
setMethod("plot",
signature(object="DataM"),
function(x, y, ...){
matplot(object@covariates[,1], object@depvar, xaxt="n",type="l",ylab= "",xlab="", pch=1)
}
)
setMethod("print",
signature(object="DataM"),
function(x,...){
temp <- dataMining(object@depvar, object@covariates)
return(temp)
}
)
setMethod("print",
signature(object="DataM"),
function(x,...){
temp <- dataMining(object@depvar, object@covariates)
print(temp)
}
)
setMethod("plot",
signature(object="DataM"),
function(x, y, ...){
matplot(x@covariates[,1], x@depvar, xaxt="n",type="l",ylab= "",xlab="", pch=1)
}
)
setMethod("plot",
signature(object="DataM"),
function(x, y, ...){
matplot(x@covariates, x@depvar, xaxt="n",type="l",ylab= "",xlab="", pch=1)
}
)
setMethod("plot",
signature(object="DataM"),
function(x, y, ...){
matplot(x@covariates, t(x@depvar), xaxt="n",type="l",ylab= "",xlab="", pch=1)
}
)
setMethod("plot",
signature(object="DataM"),
function(x, y, ...){
plot(slot(x, "covariates"), slot(x, "depvar"), xaxt="n",type="l",ylab= "",xlab="", pch=1)
}
)
setMethod("plot",
signature(x="DataM", y="missing"),
function(x, y, ...){
plot(slot(x, "covariates"), slot(x, "depvar"), xaxt="n",type="l",ylab= "",xlab="", pch=1)
}
)
setMethod("plot",
signature(x="DataM", y="missing"), #IMPORTANT NOTE: the arguments in signature must match the arguments in the original function
function(x, y, ...){
plot(x@covariates, x@depvar, xaxt="n",type="l",ylab= "",xlab="", pch=1)
}
)
setMethod("plot",
signature(x="DataM", y="missing"), #IMPORTANT NOTE: the arguments in signature must match the arguments in the original function
function(x, y, ...){
plot(x@covariates[,1], x@depvar, xaxt="n",type="l",ylab= "",xlab="", pch=1)
}
)
setMethod("print",
signature(x="DataM"),
function(x, ...){
print(cbind(x@depvar, x@covariates))
}
)
library(MyPackage)
setMethod("plot",
signature(x="DataM", y="missing"), #IMPORTANT NOTE: the arguments in signature must match the arguments in the original function
function(x, y, ...){
windows(record=TRUE)
for(i in 1:ncol(x@covariates)){
plot(x@covariates[,i], x@depvar)
}
}
)
library(MyPackage)
getMethod(DataM)
library(MyPackage)
getMethod(DataM)
getMethod("DataM")
getMethod(f=show, signature=DataM)
getMethod(f=DataM, signature=show)
getMethod(f="DataM", signature=show)
showMethods("show")
getMethod(f="show", signature="DataM")
getMethod(f="show", signature="DataM")
getMethod(f="plot", signature="DataM")
getMethod(f="show", signature="DataM")
getMethod(f="show", signature=c("DataM", "missing"))
getMethod(f="show", signature=c("DataM"))
getMethod(f="plot", signature=c("DataM", "missing"))
getMethod(f="print", signature="DataM")
getMethod(f="show", signature="DataM")
library(MyPackage)
getMethod(f="show", signature="DataM")
temp <- getMethod(f="show", signature="DataM")
getMethod("plot", signature=c("DataM", "missing"))
library(MyPackage)
getMethod("show", signature="DataM")
getMethod("print", signature="DataM")
library(MyPackage)
new("DataM")
new("DataM", depvar=rnorm(100), covariates=cbind(rnorm(100), rnorm(100), rnorm(100)))
Temp <- new("DataM", depvar=rnorm(100), covariates=cbind(rnorm(100), rnorm(100), rnorm(100)))
Temp
print(Temp)
dataMining(Temp)
getMethod("plot", signature=c("DataM", "missing"))
plot(DataM)
plot(Temp)
library(MyPackage)
X1 <- rnorm(100, 50, 20)
X2 <- runif(100)
X3 <- rnorm(100, 0, 10)
Y <- 10 + 3*X1 - 5*X2 + X3 + rnorm(100, 10, 10)
Temp <- new("DataM", depvar=Y, covariates=cbind(X1, X2, X3))
show(Temp)
plot(Temp)
importantVariables(Temp)
getMethod("show", signature="DataM")
getMethod("print", signature="DataM")
library(MyPackage)
library(MyPackage)
